#include <stdio.h>
#include <string.h>
#define MAX_STATES 10
#define MAX_SYMBOLS 10
#define MAX_DFA_STATES 1024
int n, symbols;
int nfa[MAX_SYMBOLS][MAX_STATES][MAX_STATES];
int dfa[MAX_DFA_STATES][MAX_SYMBOLS];
int dfa_state_count = 0;
int dfa_states[MAX_DFA_STATES][MAX_STATES];
int dfa_state_size[MAX_DFA_STATES];
int is_state_equal(int a[], int b[], int size) {
for (int i = 0; i < size; i++)
if (a[i] != b[i])
return 0;
return 1;
}
int is_state_present(int state[], int size) {
for (int i = 0; i < dfa_state_count; i++) {
if (dfa_state_size[i] != size) continue;
if (is_state_equal(dfa_states[i], state, size))
return i;
}
return -1;
}
void sort_state(int state[], int size) {
for (int i = 0; i < size - 1; i++)
for (int j = i + 1; j < size; j++)
if (state[i] > state[j]) {
int temp = state[i];
state[i] = state[j];
state[j] = temp;
}
}

void add_dfa_state(int state[], int size) {
sort_state(state, size);
int pos = is_state_present(state, size);
if (pos == -1) {
for (int i = 0; i < size; i++)
dfa_states[dfa_state_count][i] = state[i];
dfa_state_size[dfa_state_count] = size;
dfa_state_count++;
}
}
void convert_nfa_to_dfa() {
int front = 0;
dfa_states[0][0] = 0;
dfa_state_size[0] = 1;
dfa_state_count = 1;
while (front < dfa_state_count) {
for (int sym = 0; sym < symbols; sym++) {
int next[MAX_STATES];
int next_size = 0;
for (int i = 0; i < dfa_state_size[front]; i++) {
int state = dfa_states[front][i];
for (int k = 0; k < n; k++) {
if (nfa[sym][state][k]) {
int already_in = 0;
for (int x = 0; x < next_size; x++)
if (next[x] == k)
already_in = 1;
if (!already_in)
next[next_size++] = k;
}
}
}
sort_state(next, next_size);
int pos = is_state_present(next, next_size);
if (pos == -1) {
add_dfa_state(next, next_size);
pos = dfa_state_count - 1;
}
dfa[front][sym] = pos;

}
front++;
}
}
void get_state_label(int index, char *label) {
label[0] = '\0';
for (int i = 0; i < dfa_state_size[index]; i++) {
char temp[10];
sprintf(temp, "q%d", dfa_states[index][i]);
strcat(label, temp);
}
}
void print_dfa() {
printf("\nDFA:\n");
printf(" |");
for (int i = 0; i < symbols; i++)
printf(" Input %d |", i + 1); // Match image style (1-based)
printf("\n");
printf("--------+");
for (int i = 0; i < symbols; i++)
printf("---------+");
printf("\n");
for (int i = 0; i < dfa_state_count; i++) {
char src[50];
get_state_label(i, src);
printf("%-8s|", src);
for (int j = 0; j < symbols; j++) {
char dest[50];
get_state_label(dfa[i][j], dest);
printf("%-9s|", dest);
}
printf("\n");
}
}
int main() {
printf("Enter no. of states: ");
scanf("%d", &n);
printf("Enter no. of input symbols: ");
scanf("%d", &symbols);

for (int sym = 0; sym < symbols; sym++) {
printf("Enter NFA matrix for input %d:\n", sym);
for (int i = 0; i < n; i++)
for (int j = 0; j < n; j++)
scanf("%d", &nfa[sym][i][j]);
}
convert_nfa_to_dfa();
print_dfa();
return 0;
}
